##H Daemon for Alerting Tool (CERN SSB Status Board)
##H Usage: ssb_alert_manage <Actions>
##H
##H Actions:
##H   help        help manual
##H   start       start the service
##H   stop        stop the service
##H   status      output service's status
##H


### ***
#The following block of code was taken from
#https://github.com/dmwm/deployment/blob/master/exitcodes/manage#L27

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
LOGDIR=$TOP/logs/$ME
COLOR_OK="\\033[0;32m"
COLOR_WARN="\\033[0;31m"
COLOR_NORMAL="\\033[0;39m"

### ***

if [ ! -d $LOGDIR ]; then 
  echo "Log Directory '$LOGDIR' does not exists. Creating..."
  mkdir -p $LOGDIR
fi

if [ ! -w $LOGDIR ]; then 
    echo "$USER has no write permission for '$LOGDIR' log directory. Exiting.."
    exit 1
fi

## ssb_alert.sh arguments from Environment Variable
QUERY=$query                                  ## monit influxDB query
TOKEN=$token                                  ## token file
URL=${url:-"https://cms-monitoring.cern.ch"}   ## alertmanager_url
INTERVAL=${interval:-1}                       ## time interval at which fetching and injecting data repeats
VERBOSE=${verbose:-0}                         ##verbosity level

# Actions Logic
start()
{
    echo "Starting Alerting daemon."
    if [ ! -x "$(command -v rotatelogs)" ]; then
      echo "rotatelogs not found. Starting without it..."
      nohup ssb_alert.sh "$QUERY" $TOKEN $URL $INTERVAL $VERBOSE </dev/null 2>&1 | tee $LOGDIR/ssb_alerting-`date +%F`-`hostname -s`.log >/dev/null 2>&1 &
    else
	    nohup ssb_alert.sh "$QUERY" $TOKEN $URL $INTERVAL $VERBOSE </dev/null 2>&1 | rotatelogs $LOGDIR/ssb_alerting-%Y-%m-%d-`hostname -s`.log 86400 >/dev/null 2>&1 &
    fi
}

stop()
{
    local PID=`ps auxwww | egrep "ssb_alert.sh" | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`
    echo "Stopping Alerting daemon. PID : ${PID}"
    if [ -n "${PID}" ]; then
        kill -9 ${PID}
    fi
}

status()
{
    local PID=`ps auxwww | egrep "ssb_alert.sh" | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`
    
    if  [ -z "${PID}" ]; then
        echo $echo_e "Alerting daemon is ${COLOR_WARN}INACTIVE (DEAD)${COLOR_NORMAL}"
        return
    fi
    
    if  [ `uname` == "Darwin" ]; then
       num_threads=`ps -M -p $PID | grep -v USER | wc -l | awk '{print $1}'`
    else
       num_threads=`ps -L -p $PID | grep -v PID | wc -l | awk '{print $1}'`
    fi
    echo "Alerting daemon running $num_threads thread(s)"

    if [ ! -z "${PID}" ]; then
        echo $echo_e "Alerting daemon is ${COLOR_OK}ACTIVE (RUNNING)${COLOR_NORMAL}, PID=${PID}"
        ps -f -wwww -p ${PID}
    else
        echo $echo_e "Alerting daemon is ${COLOR_WARN}INACTIVE (DEAD)${COLOR_NORMAL}"
    fi
}

# All actions 
case ${1:-status} in
  start)
    start
    ;;

  stop )
    stop
    ;;

  status )
    status
    ;;
  
  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;
  *)
    echo "ssb_alert_manage: no action named '$1', please try 'ssb_alert_manage help'" 1>&2
    exit 1
    ;;
esac
