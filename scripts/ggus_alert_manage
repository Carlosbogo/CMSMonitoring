##H Daemon for Alerting Tool (GGUS Ticketing System)
##H Usage: ggus_alert_manage <Actions>
##H
##H Actions:
##H   help        help manual
##H   start       start the service
##H   stop        stop the service
##H   status      output service's status
##H
##H Environments:
##H   GGUS_FORMAT  :   GGUS Query Format("csv" or "xml")               default - "csv"
##H   GGUSDATAFILE :   Data json file to use                           default - /tmp/ggus_data.json
##H   CMSMON_URL   :   CMS Monitoring URL                              default - https://cms-monitoring.cern.ch"
##H   INTERVAL     :   Time interval for Alerts ingestion & injection  default - 1
##H   VO           :   Required VO attribute                           default - "cms"
##H   TIMEOUT      :   HTTP client timeout operation (GGUS Parser)     default - 0 (zero means no timeout)
##H   VERBOSE      :   Verbosity level                                 default - 0

### ***
#The following block of code was taken from
#https://github.com/dmwm/deployment/blob/master/exitcodes/manage#L27

ME=$(basename $(dirname $0))
TOP=$(cd $(dirname $0)/../../.. && pwd)
ROOT=$(cd $(dirname $0)/../.. && pwd)
LOGDIR=$TOP/logs/$ME

### ***

if [ ! -d $LOGDIR ]; then
  echo "Log Directory '$LOGDIR' does not exists. creating..." 
  
  if [ ! -w $TOP ]; then
    echo "can not create $LOGDIR: $USER has no write permission for '$TOP' directory. exiting."
    exit 1
  fi 
  
  if mkdir -p $LOGDIR; then
    echo "$LOGDIR created !"
  else
    exit 1
  fi
fi

if [ ! -w $LOGDIR ]; then 
    echo "$USER has no write permission for '$LOGDIR' log directory. exiting."
    exit 1
fi

## ggus_alert.sh arguments from Environment Variable
ggus_format=${GGUS_FORMAT:-"csv"}                               ## GGUS Query Format("csv" or "xml") 
data_file=${GGUSDATAFILE:-"/tmp/ggus_data.json"}                ## Data json file to use  
cmsmon_url=${CMSMON_URL:-"https://cms-monitoring.cern.ch"}      ## CMS Monitoring URL 
interval=${INTERVAL:-1}                                         ## Time interval for Alerts ingestion & injection
vo=${VO:-"cms"}                                                 ## Required VO attribute
timeout=${TIMEOUT:-0}                                           ## HTTP client timeout operation (GGUS Parser)
verbose=${VERBOSE:-0}                                           ## Verbosity level

# Actions Logic
start()
{
    echo "Starting GGUS Alerting daemon."
    if [ ! -x "$(command -v rotatelogs)" ]; then
      echo "rotatelogs not found. Starting without it..."
      nohup ggus_alert.sh $ggus_format $data_file $cmsmon_url $interval $vo $timeout $verbose 2>&1 1>& $LOGDIR/ggus_alerting-`date +%F`-`hostname -s`.log &
    else
	  nohup ggus_alert.sh $ggus_format $data_file $cmsmon_url $interval $vo $timeout $verbose </dev/null 2>&1 | rotatelogs $LOGDIR/ggus_alerting-%Y-%m-%d-`hostname -s`.log 86400 >/dev/null 2>&1 &
    fi
}

stop()
{
    local PID=`ps auxwww | egrep "ggus_alert.sh" | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`
    echo "Stopping GGUS Alerting daemon. PID : ${PID}"
    if [ -n "${PID}" ]; then
        kill -9 ${PID}
    fi
}

status()
{
    local PID=`ps auxwww | egrep "ggus_alert.sh" | grep -v grep | awk 'BEGIN{ORS=" "} {print $2}'`
    
    if  [ -z "${PID}" ]; then
        echo $echo_e  "GGUS Alerting daemon is INACTIVE (DEAD)"
        return
    fi
    
    if  [ `uname` == "Darwin" ]; then
       num_threads=`ps -M -p $PID | grep -v USER | wc -l | awk '{print $1}'`
    else
       num_threads=`ps -L -p $PID | grep -v PID | wc -l | awk '{print $1}'`
    fi
    echo "GGUS Alerting daemon running $num_threads thread(s)"

    if [ ! -z "${PID}" ]; then
        echo $echo_e  "GGUS Alerting daemon is ACTIVE (RUNNING), PID=${PID}"
        ps -f -wwww -p ${PID}
    else
        echo $echo_e  "GGUS Alerting daemon is INACTIVE (DEAD)"
    fi
}

# All actions 
case ${1:-status} in
  start)
    start
    ;;

  stop )
    stop
    ;;

  status )
    status
    ;;
  
  help )
    perl -ne '/^##H/ && do { s/^##H ?//; print }' < $0
    ;;
  *)
    echo "ggus_alert_manage: no action named '$1', please try 'ggus_alert_manage help'" 1>&2
    exit 1
    ;;
esac