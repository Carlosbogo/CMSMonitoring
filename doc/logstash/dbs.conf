input {
  file {
    #path => "/build/srv-logs/vocms0132/dbs/DBSGlobalReader-*.log"
    path => "/build/vk/logstash-6.6.1/DBSGlobalReader.log"
    start_position => "beginning"
  }
}

# DBS log record example
# INFO:cherrypy.access:[10/Mar/2019:21:42:53] vocms0136.cern.ch 128.142.35.219 "GET /dbs/prod/global/DBSReader/datasets?dataset_access_type=%2A&detail=1&dataset=%2FGluGluHToZZTo2L2Nu_M2500_13TeV_powheg2_JHUGenV7011_pythia8%2FRunIIAutumn18NanoAOD-102X_upgrade2018_realistic_v15-v1%2FNANOAODSIM HTTP/1.1" 200 OK [data: - in 753 out 3711 us ] [auth: OK "/DC=ch/DC=cern/OU=Organic Units/OU=Users/CN=dmytro/CN=658085/CN=Dmytro Kovalskyi" "" ] [ref: "" "PycURL/7.19.7" ]

filter {
  ruby {
    code => "event.set('timestamp',(event.get('@timestamp').to_f * 1000).to_i)"
  }
  if [path] =~ "DBSGlobalReader" {
    mutate { replace => { "type" => "dbs_access" } }
    mutate { replace => { "producer" => "cmsweb" } }
    mutate { replace => { "service" => "dbs_global_reader" } }
    # https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns
    grok {
      match => { "message" => '.*\[%{NOTSPACE:timestamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:agent}" \]' }
    }
    grok {
       match => { "request" => '/dbs/%{WORD:instance}/%{WORD:instance_type}/DBSReader/%{WORD:api}?%{DATA:params}' }
    }
  }
}

output {
  file {
    path => "/build/vk/logstash-6.6.1/output.log"
  }
}

#output {
#    if [type] == "apache"{
#        http {
#            http_method => post
#            url => "http://monit-logs.cern.ch:10012/"
#            id => "monit_cmsweb"
#            format => "message"
#            content_type => "application/json; charset=UTF-8"
#        }
#        }
#    }
#}
