input {
  file {
    path => [
        "/build/srv-logs/vocms0158/frontend/access_log_*.txt",
        "/build/srv-logs/vocms0162/frontend/access_log_*.txt",
        "/build/srv-logs/vocms0164/frontend/access_log_*.txt",
        "/build/srv-logs/vocms0760/frontend/access_log_*.txt"
    ]
    start_position => "beginning"
    type => "apache"
  }
  file {
    path => [
        "/build/srv-logs/vocms0136/dbs/DBSGlobalReader-*.log",
        "/build/srv-logs/vocms0161/dbs/DBSGlobalReader-*.log",
        "/build/srv-logs/vocms0163/dbs/DBSGlobalReader-*.log",
        "/build/srv-logs/vocms0165/dbs/DBSGlobalReader-*.log"
    ]
    start_position => "beginning"
    type => "dbs_global"
  }
  file {
    path => [
        "/build/srv-logs/vocms0740/couchdb/*.log",
        "/build/srv-logs/vocms0741/couchdb/*.log",
        "/build/srv-logs/vocms0742/couchdb/*.log"
    ]
    start_position => "beginning"
    type => "couchdb"
  }
}

filter {
  ruby {
    code => "event.set('timestamp',(event.get('@timestamp').to_f * 1000).to_i)"
  }
  mutate { replace => { "producer" => "cmsweb" } }

  # https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns

  # capture apache records
  if [type] == "apache" {
     # example of cmsweb apache entry
     #[10/Mar/2019:00:59:59 +0100] cmsweb.cern.ch 137.138.152.31 "GET /reqmgr2/data/request?name=vlimant_ACDC0_task_B2G-RunIIFall17wmLHEGS-00607__v1_T_190304_194213_4399 HTTP/1.1" 200 [data: 3044 in 29413 out 11256 body 70659 us ] [auth: TLSv1.2 ECDHE-RSA-AES128-GCM-SHA256 "/DC=ch/DC=cern/OU=computers/CN=wmagent/vocms0308.cern.ch" "-" ] [ref: "-" "WMCore.Services.Requests/v001" ]
 
     grok {
       match => { "message" => '\[%{HTTPDATE:tstamp}\] %{DATA:frontend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} \[data:.*\] \[auth: %{DATA:tls} %{DATA:crypto} "%{DATA:dn}".*\] \[ref: "%{DATA}.*" "%{DATA:client}" \]' }
     }
     grok {
        match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' }
     }
     if [uri_params] {
         grok {
            match => { "uri_path" => '/.*/%{DATA:api}$' }
         }
         if [api] == "" {
             grok {
                match => { "uri_path" => '/.*/%{DATA:api}/$' }
             }
         }
     } else {
         mutate { replace => { "api" => "" } }
     }
     if [uri_params] and ![api] {
         grok {
            match => { "uri_path" => '/.*/%{DATA:api}/$' }
         }
     }
     # https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html
     # date string example: [10/Mar/2019:00:59:59 +0100]
     date {
        match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "date_object"
     }
     ruby {    
        code => "event.set('rec_timestamp',event.get('date_object'))"
        #code => "event.set('rec_timestamp',event.get('date_object').to_i)"
     }  
  }

  # capture dbs records
  if [type] == "dbs_global" {
     # example of cmsweb apache entry
     # INFO:cherrypy.access:[10/Mar/2019:21:42:53] vocms0136.cern.ch 128.142.35.219 "GET /dbs/prod/global/DBSReader/datasets?dataset_access_type=%2A&detail=1&dataset=%2FGluGluHToZZTo2L2Nu_M2500_13TeV_powheg2_JHUGenV7011_pythia8%2FRunIIAutumn18NanoAOD-102X_upgrade2018_realistic_v15-v1%2FNANOAODSIM HTTP/1.1" 200 OK [data: - in 753 out 3711 us ] [auth: OK "/DC=ch/DC=cern/OU=Organic Units/OU=Users/CN=dmytro/CN=658085/CN=Dmytro Kovalskyi" "" ] [ref: "" "PycURL/7.19.7" ]
 
     #mutate { replace => { "type" => "dbs_access" } }
     mutate { replace => { "service" => "dbs_global_reader" } }
     # https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns
     grok {
       match => { "message" => '.*\[%{NOTSPACE:tstamp}\] %{DATA:backend} %{IPORHOST:clientip} "%{WORD:method} %{NOTSPACE:request} %{DATA:httpversion}" %{NUMBER:code:int} %{WORD:status} \[data:.*\] \[auth: %{WORD:auth} "%{DATA:dn}" "%{DATA}.*" \] \[ref: "%{DATA}.*" "%{DATA:agent}" \]' }
     }
     grok {
        match => { "request" => '/dbs/%{WORD:instance}/%{WORD:instance_type}/DBSReader/%{WORD:api}?%{DATA:params}' }
     }
     # https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html
     # date string example: [10/Mar/2019:21:42:53]
     date {
        match => [ "tstamp", "dd/MMM/yyyy:HH:mm:ss" ]
        target => "date_object"
     }
     ruby {    
        code => "event.set('rec_timestamp',event.get('date_object'))"
        #code => "event.set('rec_timestamp',event.get('date_object').to_i)"
     }  
  }

  # capture couchdb records
  if [type] == "couchdb" {
     mutate { replace => { "service" => "couchdb" } }
     # https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns
     grok {
       #patterns_dir => ["./patterns"]
       #match => { "message" => '\[%{COUCHDATE:tstamp}\] \[%{WORD:log_level}\] \[<.*>\] %{IPORHOST:clientip} - - %{WORD:method} %{NOTSPACE:request} %{NUMBER:code:int}' }
       match => { "message" => '\[%{GREEDYDATA:tstamp}\] \[%{WORD:log_level}\] \[<.*>\] %{IPORHOST:clientip} - - %{WORD:method} %{NOTSPACE:request} %{NUMBER:code:int}' }
     }
    grok {
       match => { "request" => '/%{WORD:system}%{UNIXPATH:uri_path}%{URIPARAM:uri_params}?' }
    }
    grok {
       match => { "uri_path" => '/.*/%{DATA:api}$' }
    }
    # https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html
    # date string example: Tue, 05 Dec 2017 06:05:50 GMT
    date {
       timezone => "UTC"
       match => [ "tstamp", "EEE, dd MMM yyyy HH:mm:ss ZZZ" ]
       target => "date_object"
    }
    ruby {    
        code => "event.set('rec_timestamp',event.get('date_object'))"
        #code => "event.set('rec_timestamp',event.get('date_object').to_i)"
    }  
  }
  mutate {
    gsub => [
        "message", "\n", "",
        "message", "\"", "",
        "message", "\[", "",
        "message", "\]", "",
        "request", "\n", "",
        "request", "\"", "",
        "request", "\[", "",
        "request", "\]", ""
    ]
  }
}

# send results (JSON records) to local file
#output {
#  file {
#    path => "output.log"
#  }
#}

# send results (JSON records) to CERN MONIT HTTP endpoint
output {
    if [type] == "apache" {
        http {
            http_method => post
            url => "http://monit-logs.cern.ch:10012/"
            format => "message"
            content_type => "application/json; charset=UTF-8"
            message => '[{"producer": "%{producer}","type": "%{type}","raw":"%{message}","method":"%{method}","code":"%{code}","client":"%{client}","api":"%{api}","clientip":"%{clientip}","dn":"%{dn}","system":"%{system}","request":"%{request}","uri_path":"%{uri_path}","host":"%{host}","frontend":"%{frontend}","timestamp":"%{timestamp}","path":"%{path}","rec_timestamp":"%{rec_timestamp}"}]'
        }
    }
    if [type] == "dbs_global" {
        http {
            http_method => post
            url => "http://monit-logs.cern.ch:10012/"
            format => "message"
            content_type => "application/json; charset=UTF-8"
            message => '[{"producer": "%{producer}","type": "%{type}","instance":"%{instance}","method":"%{method}","agent":"%{agent}","status":"%{status}","code":"%{code}","backend":"%{backend}","api":"%{api}","clientip":"%{clientip}","dn":"%{dn}","instance_type":"%{instance_type}","request":"%{request}","host":"%{host}","service":"%{service}","timestamp":"%{timestamp}","path":"%{path}","rec_timestamp":"%{rec_timestamp}"}]'
        }
    }
    if [type] == "couchdb" {
        http {
            http_method => post
            url => "http://monit-logs.cern.ch:10012/"
            format => "message"
            content_type => "application/json; charset=UTF-8"
            message => '[{"producer": "%{producer}","type": "%{type}","system":"%{system}","uri_params":"%{uri_params}","uri_path":"uri_path","method":"%{method}","code":"%{code}","api":"%{api}","clientip":"%{clientip}","request":"%{request}","host":"%{host}","service":"%{service}","timestamp":"%{timestamp}","path":"%{path}","rec_timestamp":"%{rec_timestamp}"}]'
        }
    }
}
